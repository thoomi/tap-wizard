"use strict";angular.module("clientApp",["ngRoute"]).config(function($routeProvider){$routeProvider.when("/",{templateUrl:"views/main.html",controller:"MainCtrl"}).when("/joingame",{templateUrl:"views/joingame.html",controller:"JoingameCtrl"}).when("/creategame",{templateUrl:"views/creategame.html",controller:"CreategameCtrl"}).when("/playergame",{templateUrl:"views/playergame.html",controller:"PlayergameCtrl"}).when("/hostgame",{templateUrl:"views/hostgame.html",controller:"HostgameCtrl"}).otherwise({redirectTo:"/"})}),angular.module("clientApp").controller("MainCtrl",function($scope){$scope.game={start:"new game",join:"join game"}}),angular.module("clientApp").factory("socket",function($rootScope){var socket=io.connect("http://wiz.herokuapp.com");return{on:function(eventName,callback){socket.on(eventName,function(){var args=arguments;$rootScope.$apply(function(){callback.apply(socket,args)})})},emit:function(eventName,data,callback){socket.emit(eventName,data,function(){var args=arguments;$rootScope.$apply(function(){callback&&callback.apply(socket,args)})})},removeAllListeners:function(){socket.removeAllListeners()}}}),angular.module("clientApp").controller("JoingameCtrl",function($scope,$location,socket,gameData){$scope.joinGameText="Join",$scope.isConnectDisabled=!1,gameData.playerName="Player",gameData.gameId=0,$scope.connectToGame=function(){$scope.isConnectDisabled=!0,$scope.joinGameText="Joining..",gameData.playerName=$scope.playerName,gameData.gameId=$scope.gameId,socket.emit("playerJoinGame",gameData)},socket.on("playerJoinSuccess",function(){$location.path("playergame")}),socket.on("error",function(data){console.log("Error: "+data),$scope.isConnectDisabled=!1,$scope.joinGameText="Join"}),$scope.$on("$destroy",function(){socket.removeAllListeners()})}),angular.module("clientApp").controller("CreategameCtrl",function($scope,$location,socket,hostGameData){$scope.game={wait:"Waiting for other players to join:",play:"Start",players:[]},$scope.isStartDisabled=!0,hostGameData.gameId=0,hostGameData.currentRound=1,hostGameData.maxRounds=20,hostGameData.players=[],socket.on("connected",function(){console.log("Websocket connected")}),socket.on("newGameCreated",function(data){$scope.game.id=data.gameId,hostGameData.gameId=data.gameId}),socket.on("playerJoinedGame",function(data){$scope.game.players.push(data),hostGameData.players.push(data),$scope.game.players.length>=3&&($scope.isStartDisabled=!1)}),socket.on("playerLeftGame",function(id){for(var indexOfPlayer=0;indexOfPlayer<$scope.game.players.length;indexOfPlayer++)$scope.game.players[indexOfPlayer].playerId===id&&($scope.game.players.splice(indexOfPlayer,1),hostGameData.players.splice(indexOfPlayer,1));$scope.game.players.length<3&&($scope.isStartDisabled=!0)}),socket.on("beginNewGame",function(data){hostGameData.maxRounds=data.maxRounds,$location.path("hostgame")}),$scope.prepareGameForPlay=function(){$scope.isStartDisabled=!0,socket.emit("hostPrepareGame",hostGameData.gameId)},socket.emit("hostCreateNewGame"),$scope.$on("$destroy",function(){socket.removeAllListeners()}),$scope.range=function(n){return new Array(n)}}),angular.module("clientApp").controller("PlayergameCtrl",function($scope,socket,gameData){$scope.cards=[],$scope.currentRound=0,$scope.notification="Waiting for the host to start the game!",$scope.isGuessTricksDisabled=!1,$scope.gameOver=!1,$scope.winnerName="",$scope.playedCardThisTrick=!1,$scope.isThrowCardsDisabled=!0,socket.on("newHandCard",function(card){$scope.cards.push(card)}),socket.on("beginNewGame",function(){$scope.notification="Game is running!"}),socket.on("cardNotAllowed",function(card){$scope.notification="Sorry, card is not allowed: "+card.suit+" "+card.value,$scope.cards.push(card),$scope.playedCardThisTrick=!1}),socket.on("startNewRound",function(round){$scope.currentRound=round,$scope.isGuessTricksDisabled=!1,$scope.notification="Please guess your number of tricks.",$scope.isThrowCardsDisabled=!0}),socket.on("playerHasWonTrick",function(){$scope.playedCardThisTrick=!1}),socket.on("playerIsDealer",function(){$scope.notification='Hit "Start Round" on the gametable, please. You\'re the dealer!'}),socket.on("playerBeginTrick",function(){$scope.notification="Your are the first player in this round."}),socket.on("allTricksGuessed",function(){$scope.isThrowCardsDisabled=!1,$scope.notification="Game is running!"}),socket.on("gameIsOver",function(winnerName){$scope.notification="Game is over!",$scope.winnerName=winnerName,$scope.gameOver=!0}),$scope.throwCard=function(card){if($scope.playedCardThisTrick===!1&&$scope.isThrowCardsDisabled===!1){var data={gameId:gameData.gameId,card:card};socket.emit("playerThrowCard",data);for(var indexOfCard=0;indexOfCard<$scope.cards.length;indexOfCard++)$scope.cards[indexOfCard].suit===card.suit&&$scope.cards[indexOfCard].value===card.value&&$scope.cards.splice(indexOfCard,1);return $scope.playedCardThisTrick=!0,!0}return!1},$scope.guessNumberOfTricks=function(number){var data={gameId:gameData.gameId,guessedTricks:number};socket.emit("playerGuessTricks",data),$scope.isGuessTricksDisabled=!0,$scope.notification="Waiting for others to guess tricks."},$scope.$on("$destroy",function(){socket.removeAllListeners()}),$scope.range=function(n){return new Array(n)}}),angular.module("clientApp").factory("gameData",function(){var playerName="Player",gameId=0;return{playerName:playerName,gameId:gameId}}),angular.module("clientApp").controller("HostgameCtrl",function($scope,socket,hostGameData,$timeout){$scope.gameId=hostGameData.gameId,$scope.players=hostGameData.players,$scope.cards=[],$scope.round={current:hostGameData.currentRound,max:hostGameData.maxRounds},$scope.trickwinner="",$scope.trumpCard={},$scope.scores=[],$scope.gameOver=!1,$scope.winnerName="",$scope.isStartRoundDisabled=!1,socket.on("playerHasThrownCard",function(card){$scope.cards.push(card)}),socket.on("newTrumpCard",function(card){$scope.trumpCard=card}),socket.on("playerGuessedTricks",function(data){$scope.scores[$scope.round.current][data.playerId]={},$scope.scores[$scope.round.current][data.playerId].guessedTricks=data.guessedTricks}),socket.on("playerHasWonTrick",function(name){$scope.trickwinner=name,$timeout(function(){$scope.cards=[],console.log("executed")},5e3)}),socket.on("roundIsOver",function(points){$scope.trumpCard={};for(var indexOfPlayer=0;indexOfPlayer<$scope.players.length;indexOfPlayer++){var playerId=$scope.players[indexOfPlayer].playerId,currentScore=$scope.players[indexOfPlayer].points,scoreToAdd=points[playerId];$scope.scores[$scope.round.current][playerId].score=currentScore+scoreToAdd,$scope.players[indexOfPlayer].points=currentScore+scoreToAdd}$scope.round.current++,$scope.isStartRoundDisabled=!1}),socket.on("gameIsOver",function(winnerName){$scope.winnerName=winnerName,$scope.gameOver=!0}),$scope.startRound=function(){$scope.isStartRoundDisabled=!0,$scope.scores[$scope.round.current]={},$scope.trickwinner="",socket.emit("hostStartRound",hostGameData.gameId)},$scope.range=function(n){return new Array(n)}}),angular.module("clientApp").factory("hostGameData",function(){function findPlayerById(playerId){for(var indexOfPlayer=0;indexOfPlayer<players.length;indexOfPlayer++)if(players[indexOfPlayer].playerId===playerId)return players[indexOfPlayer]}var gameId=0,players=[],currentRound=1,maxRounds=20;return{gameId:gameId,players:players,currentRound:currentRound,maxRounds:maxRounds,numberOfPlayers:players.length,findPlayerById:findPlayerById}}),angular.module("clientApp").directive("tbPlayingCard",function(){return{templateUrl:"../../views/tb-playingcard.html",restrict:"E",scope:{card:"=info",throwCard:"&callbackFn"}}}),angular.module("clientApp").directive("modalDialog",function(){return{templateUrl:"../../views/modaldialog.html",restrict:"E",scope:{winnerName:"=info"}}});